@using AS_Store_GL.Models
@model AS_Store_GL.Models.DTO.Gl_StransDTO

@{
    ViewBag.Title = "TypeWiseRoomInformation";

    if (HttpContext.Current.Session["LoggedUserType"] == null)
    {
        Response.Redirect(Url.Action("Index", "Login"));
    }

    var LoggedUserTp = HttpContext.Current.Session["LoggedUserType"].ToString();
    var LoggedUserStatus = HttpContext.Current.Session["LoggedUserStatus"].ToString();
    var LoggedCompanyStatus = HttpContext.Current.Session["LoggedCompanyStatus"].ToString();

    if ((LoggedUserTp == "CompanyAdmin" || LoggedUserTp == "UserAdmin" || LoggedUserTp == "User") && LoggedUserStatus == "A" && LoggedCompanyStatus == "A")
    {

    }
    else
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }


    Store_GL_DbContext db = new Store_GL_DbContext();
    Int64 LoggedCompId = Convert.ToInt64(System.Web.HttpContext.Current.Session["loggedCompID"]);
    Int64 loggedUserID = Convert.ToInt64(System.Web.HttpContext.Current.Session["loggedUserID"]);

    var query = from m in db.AslRoleDbSet
                where m.COMPID == LoggedCompId && m.USERID == loggedUserID && m.CONTROLLERNAME == "ChequePayment" && m.ACTIONNAME == "Index"
                select new { m.STATUS, m.INSERTR, m.UPDATER, m.DELETER };
    string status = "", insert = "", update = "", delete = "";
    foreach (var S in query)
    {
        status = S.STATUS;
        insert = S.INSERTR;
        update = S.UPDATER;
        delete = S.DELETER;
    }

    if (status == "I")
    {
        Response.Redirect("~/GraphView/Index");
    }



    List<SelectListItem> listtype = new List<SelectListItem>();
    listtype.Add(new SelectListItem { Text = "PAYMENT", Value = "MPAY" });
    listtype.Add(new SelectListItem { Text = "CONTRA", Value = "CONT" });



}

<link href="~/Content/Angular-File/ng-grid.css" rel="stylesheet"/>

<link href="~/Content/bootstrap datepicker css/datepicker.css" rel="stylesheet" />
<link href="~/Content/bootstrap datepicker css/datepicker3.css" rel="stylesheet" />

<script src="~/Scripts/bootstrap-datepicker.js"></script>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div id="contentHeaderBox">
        <h1 style="padding-left:16px">Cheque Print</h1>
        @*<div class="btn-group pull-right" id="editOption">
                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" aria-expanded="false">
                    <i class="fa fa-cog"></i>
                </button>
                <ul class="dropdown-menu pull-right" style="" role="menu">
                    <li>
                        <a href="@Url.Action("RoomTypeInformation", "Room")"><i class="fa fa-file-text"></i>Room Type Information</a>
                    </li>
                </ul>
            </div>*@
    </div>
    <br />


    <div class="col-md-12">
        <div class="form-group">
            <div ng-app="ChequePaymentApp" data-ng-controller="ApiChequePaymentController">

                <div class="row">
                    <form data-ng-show="addMode" @*style="width:600px;margin:0px auto;"*@>
                        @Html.HiddenFor(model => model.COMPID, new {id = "txtcompid", style = "width:3em;", @Value = LoggedCompId})
                        @Html.HiddenFor(model => model.INSUSERID, new {id = "txtInsertUserid", style = "width:3em;", @Value = loggedUserID})
                        @Html.HiddenFor(model => model.Update, new {id = "txt_Updateid", style = "width:3em;", @Value = update})

                        @Html.HiddenFor(model => model.INSLTUDE, new {id = "latlon"})
                        <input id="lat" type="hidden"/>
                        <input id="lon" type="hidden"/>

                        <div class="col-md-2">
                            @Html.Label("name", "Date", htmlAttributes: new {@class = "control-label"})
                        </div>
                        <div class="col-md-3">
                            @Html.TextBoxFor(model => model.TransDate, new {id = "txt_Date", @class = "form-control", autofocus = true})
                        </div>

                        <div class="col-md-2" style="text-align: right">
                            @Html.Label("name", "Type", htmlAttributes: new {@class = "control-label"})
                        </div>
                        <div class="col-md-3">
                            @Html.DropDownListFor(model => model.TRANSTP, listtype, htmlAttributes: new {id = "txt_Type", @class = "form-control"})
                        </div>
                        <div class="col-md-2" id="divSearchBtn">
                            <input type="submit" value="Search" data-ng-click="search($event)" class="btn btn-primary" id="btnSearch"/>
                        </div>
                        @*<div class="col-md-2" id="divRefreshBtn">
                            <input type="submit" value="Refresh" class="btn btn-primary"  />
                        </div>*@
                    </form>
                </div>
                <br/>
                <div class="row">
                    <div class="col-md-12">
                        <p>Please select this print format. <strong>NB:</strong> Layout-[<strong>Portrait</strong>];Paper Size-[<strong>Envelope COM10</strong>];Margin- [<strong>Default</strong>].</p>                       
                    </div>
                </div>

                <div class="row">
                    @*<div class="col-md-1">
                        </div>*@
                    <div class="col-md-12">
                        <div class="panel panel-primary">
                            <div class="panel-heading">Cheque Payment</div>
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <tr>
                                        <th>Payment Particulars</th>
                                        <th>Cheque Date </th>
                                        <th>Amount</th>
                                        <th>Pay To</th>
                                        <th></th>
                                    </tr>
                                    <tr data-ng-repeat="testitem in PaymentData">
                                        <td hidden><strong data-ng-hide="testitem.editMode">{{testitem.Id}}</strong></td>
                                        <td hidden><p data-ng-hide="testitem.editMode">{{ testitem.COMPID }}</p></td>
                                        <td hidden><p data-ng-hide="testitem.editMode">{{ testitem.TRANSTP }}</p></td>
                                        <td hidden><p data-ng-hide="testitem.editMode">{{ testitem.TRANSDT }}</p></td>
                                        <td hidden><p data-ng-hide="testitem.editMode">{{ testitem.DEBITCD }}</p></td>
                                        <td>
                                            <p data-ng-hide="testitem.editMode">{{ testitem.PaymentParticulars }}</p>
                                            <input class="form-control" data-ng-show="testitem.editMode" type="text" data-ng-model="testitem.PaymentParticulars" id="gridPaymentParticulars" readonly="readonly"/>
                                        </td>
                                        <td>
                                            <p data-ng-hide="testitem.editMode">{{ testitem.CHEQUEDT }}</p>
                                            <input class="form-control" data-ng-show="testitem.editMode" type="text" data-ng-model="testitem.CHEQUEDT" id="gridChequeDate" readonly="readonly"/>
                                        </td>
                                        <td>
                                            <p data-ng-hide="testitem.editMode">{{ testitem.AMOUNT }}</p>
                                            <input class="form-control" data-ng-show="testitem.editMode" type="text" data-ng-model="testitem.AMOUNT" id="gridAmount" readonly="readonly" />
                                        </td>
                                        <td>
                                            <p data-ng-hide="testitem.editMode">{{ testitem.CHQPAYTO }}</p>
                                            <input class="form-control" data-ng-show="testitem.editMode" type="text" data-ng-model="testitem.CHQPAYTO" id="gridPayTo" />
                                        </td>
                                        <td>
                                            <p data-ng-hide="testitem.editMode"><a data-ng-click="toggleEdit(testitem)" href="javascript:;">Edit</a> | <a data-ng-click="print(testitem)" href="javascript:;">Print</a></p>
                                            <p data-ng-show="testitem.editMode"><a data-ng-click="update(testitem)" href="javascript:;">Save</a> | <a data-ng-click="toggleEdit_Cancel(testitem)" href="javascript:;">Cancel</a></p>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>
                    @*<div class="col-md-1">
                        </div>*@
                </div>
            </div>
        </div>
    </div>




    //Latitute & longitude
    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <script language="javascript" type="text/javascript">
        $(function () {
            navigator.geolocation.getCurrentPosition(showPosition);
            //navigator.geolocation.getCurrentPosition(showPosition, positionError);

            function showPosition(position) {
                var coordinates = position.coords;
                $("#lat").val(coordinates.latitude);
                $("#lon").val(coordinates.longitude);

                $("#latlon").val(
                    $("#lat").val() + "," + $("#lon").val()
                );
            }
        });
    </script>


    <script type="text/javascript">

        $(document).ready(function () {

            $('#txt_Date').datepicker({
                format: "dd-M-yyyy",
                autoclose: true,
                todayHighlight: true,
                showOnFocus: true,
            }).on('show', function (e) {
                if (e.date) {
                    $(this).data('stickyDate', e.date);
                } else {
                    $(this).data('stickyDate', null);
                }
            }).on('hide', function (e) {
                var stickyDate = $(this).data('stickyDate');

                if (!e.date && stickyDate) {
                    $(this).datepicker('setDate', stickyDate);
                    $(this).data('stickyDate', null);
                }
                document.getElementById("txt_Type").focus();
            });

            //$('#divRefreshBtn').hide();
            //$('#btnSearch').click(function () {
            //    $('#divRefreshBtn').show();
            //    $('#divSearchBtn').hide();
                
            //});

        });
    </script>
}


@*<link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />
<script src="~/Scripts/jquery-1.9.1.min.js"></script>
<script src="~/Scripts/jquery-ui-1.10.4.min.js"></script>*@


<script src="~/Scripts/angularjs/1.0.5/angular.js"></script>
<script src="~/Scripts/ChequePayment/ChequePayment.js"></script>
<script src="~/Scripts/angularjs/ui-bootstrap-tpls-0.4.0.js"></script>


@*@section Scripts {
        @Scripts.Render("~/bundles/jquery")
        @Scripts.Render("~/bundles/jqueryui")
        @Scripts.Render("~/bundles/jqueryval")

    }*@









